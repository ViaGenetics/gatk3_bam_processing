#!/usr/bin/env python
# gatk3_bam_processing 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# See https://wiki.dnanexus.com/Developer-Portal for documentation and
# tutorials on how to modify this file.
#
# DNAnexus Python Bindings (dxpy) documentation:
#   http://autodoc.dnanexus.com/bindings/python/current/

import os
import dxpy

@dxpy.entry_point('main')
def main(bam_files, sampleId, padding, reference, loglevel, indel_vcf=None, dbsnp=None, advanced_rtc_options=None, advanced_ir_options=None, advanced_br_options=None, advanced_pr_options=None):

    # The following line(s) initialize your data object inputs on the platform
    # into dxpy.DXDataObject instances that you can start using immediately.

    bam_files = [dxpy.DXFile(item) for item in bam_files]
    reference = dxpy.DXFile(reference)
    if indel_vcf is not None:
        indel_vcf = [dxpy.DXFile(item) for item in indel_vcf]
    if dbsnp is not None:
        dbsnp = dxpy.DXFile(dbsnp)

    # The following line(s) download your file inputs to the local file system
    # using variable names for the filenames.

    dxpy.download_dxfile(reference.get_id(), "reference")
    if dbsnp is not None:
        dxpy.download_dxfile(dbsnp.get_id(), "dbsnp")
    for i, f in enumerate(bam_files):
        dxpy.download_dxfile(f.get_id(), "bam_files-" + str(i))
    if indel_vcf is not None:
        for i, f in enumerate(indel_vcf):
            dxpy.download_dxfile(f.get_id(), "indel_vcf-" + str(i))

    # Fill in your application code here.

    # The following line(s) use the Python bindings to upload your file outputs
    # after you have created them on the local file system.  It assumes that you
    # have used the output field name for the filename for each output, but you
    # can change that behavior to suit your needs.

    output_recalibrated_bam = dxpy.upload_local_file("output_recalibrated_bam")
    output_recalibrated_cram = dxpy.upload_local_file("output_recalibrated_cram")

    # The following line fills in some basic dummy output and assumes
    # that you have created variables to represent your output with
    # the same name as your output fields.

    output = {}
    output["output_recalibrated_bam"] = dxpy.dxlink(output_recalibrated_bam)
    output["output_recalibrated_cram"] = dxpy.dxlink(output_recalibrated_cram)

    return output

dxpy.run()
